% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\name{run_branches}
\alias{run_branches}
\title{Evaluate a function across different local package branches}
\usage{
run_branches(
  fn,
  ...,
  args = list(),
  current = TRUE,
  branches = "main",
  libpath = .libPaths(),
  args_pak = list(),
  args_callr = list()
)
}
\arguments{
\item{fn}{\verb{[function]}

A function to evaluate. The function is passed along to \code{\link[callr:r]{callr::r()}}, so
it is evaluated in a fresh R session and must be self-contained.

Read the \code{func} docs of \code{\link[callr:r]{callr::r()}} for the full set of restrictions on
\code{fn}.

\code{fn} is converted to a function with \code{\link[rlang:as_function]{rlang::as_function()}}, so it can be
a lambda function.}

\item{...}{These dots are for future extensions and must be empty.}

\item{args}{\verb{[list]}

An optional list of arguments to pass to the function.}

\item{current}{\verb{[TRUE / FALSE]}

Should the current git branch be included in the vector of \code{branches}?}

\item{branches}{\verb{[character]}

A character vector of git branch names to check out, install, and run \code{fn}
against.

It is expected that your working directory is set to the git directory
of the package you want to install different branches of. This is typically
the case whenever you open an RStudio project for the package in question.
Technically, the path is determined by \code{\link[usethis:proj_utils]{usethis::proj_get()}}.

Your git tree must be completely clean to use \code{branches}. If there are any
uncommitted changes, an error will be thrown because \code{run_branches()} must
swap between the branches to install the package, potentially resulting in
a loss of information. Note that untracked files are not included in this
check - they should never be lost when the branch is changed, but they
could affect the results.

After the last branch is installed, the original branch is checked out.}

\item{libpath}{\verb{[character]}

The base library path to use.}

\item{args_pak}{\verb{[named list]}

A named list of arguments to pass on to \code{\link[pak:pkg_install]{pak::pkg_install()}}.

Can't include:
\itemize{
\item \code{pkg}
\item \code{lib}
\item \code{ask}
}}

\item{args_callr}{\verb{[named list]}

A named list of arguments to pass on to \code{\link[callr:r]{callr::r()}}.

Can't include:
\itemize{
\item \code{func}
\item \code{args}
\item \code{libpath}
}}
}
\value{
A data frame with two columns:
\itemize{
\item \code{branch}, a character vector containing \code{branches}.
\item \code{result}, a list column containing the result of calling \code{fn} for that
branch of the package.
}
}
\description{
\code{run_branches()} is similar to \code{\link[=run_versions]{run_versions()}}, except it allows you to run
\code{fn} across different local branches corresponding to the same package,
rather than different CRAN or GitHub versions of that package.

The default behavior runs the current branch against the \code{main} branch.
}
\details{
The installed packages are placed in temporary directories that act as an
extra library path. The temporary directory is prepended to \code{libpath}, which
is then passed along to \code{\link[callr:r]{callr::r()}} as the \code{libpath} argument there. This
ensures that your personal package libraries remain untouched.
}
\section{Global options}{

\itemize{
\item \code{cross.quiet}: \verb{[TRUE / FALSE]}

Should cross specific messages about the process be shown?

Defaults to \code{!rlang::is_interactive()} if not set, so messages are only
shown when running interactively.
\item \code{cross.pak_quiet}: \verb{[TRUE / FALSE]}

Should pak installation messages be shown?

Defaults to \code{TRUE} if not set.
}
}

\examples{
\dontshow{if (FALSE) withAutoprint(\{ # examplesIf}
# Similar to `run_versions()`, but this runs the function across
# 2 local branches.
# To run this:
# - The working directory is set to the RStudio project for vctrs
# - There can't be any uncommitted git changes
# - You are currently on a branch, say `fix/performance-bug`
# - You'd like to run that branch against `main`
run_branches(~{
  library(vctrs)
  x <- c(TRUE, FALSE, NA, TRUE)
  bench::mark(vec_detect_missing(x))
})
\dontshow{\}) # examplesIf}
}

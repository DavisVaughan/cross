% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\name{run}
\alias{run}
\title{Evaluate a function across different package versions}
\usage{
run(
  fn,
  ...,
  pkgs = character(),
  branches = character(),
  libpath = .libPaths(),
  args_pak = list(),
  args_callr = list()
)
}
\arguments{
\item{fn}{\verb{[function]}

A function to evaluate. The function is passed along to \code{\link[callr:r]{callr::r()}}, so
it is evaluated in a fresh R session and must be self-contained. Typically
the function will not have any arguments.

Read the \code{func} docs of \code{\link[callr:r]{callr::r()}} for the full set of restrictions on
\code{fn}.

\code{fn} is converted to a function with \code{\link[rlang:as_function]{rlang::as_function()}}, so it can be
a lambda function.}

\item{...}{These dots are for future extensions and must be empty.}

\item{pkgs}{\verb{[character]}

A character vector of package names or remote package specifications to
install and run \code{fn} against. Passed along to \code{\link[pak:pkg_install]{pak::pkg_install()}}.}

\item{branches}{\verb{[character]}

A character vector of git branch names to check out, install, and run \code{fn}
against.

It is expected that your working directory is set to the git directory
of the package you want to install different branches of. This is typically
the case whenever you open an RStudio project for the package in question.
Technically, the path is determined by \code{\link[usethis:proj_utils]{usethis::proj_get()}}.

Your git tree must be completely clean to use \code{branches}. If there are any
uncommitted changes, an error will be thrown because \code{run()} must swap
between the branches to install the package, potentially resulting in a
loss of information. Note that untracked files are not included in this
check - they should never be lost when the branch is changed, but they
could affect the results.

After the last branch is installed, the original branch is checked out.}

\item{libpath}{\verb{[character]}

The base library path to use. The temporary library path that \code{pkgs} and
\code{branches} is installed into will be prepended to this list.}

\item{args_pak}{\verb{[named list]}

A named list of arguments to pass on to \code{\link[pak:pkg_install]{pak::pkg_install()}}.

Can't include:
\itemize{
\item \code{pkg}
\item \code{lib}
\item \code{ask}
}}

\item{args_callr}{\verb{[named list]}

A named list of arguments to pass on to \code{\link[callr:r]{callr::r()}}.

Can't include:
\itemize{
\item \code{func}
\item \code{libpath}
}}
}
\value{
A data frame with two columns:
\itemize{
\item \code{source}, a character vector of \code{c(pkgs, branches)}.
\item \code{result}, a list column containing the result of calling \code{fn} for that
version of the package.
}
}
\description{
\code{run()} allows you to run a single function, \code{fn}, multiple times in separate
R sessions, where each R sessions has different versions of packages
installed. A typical use case is running a before/after benchmark, comparing
the CRAN version of a package with a development version of the same package.

For example, \code{run(fn, pkgs = c("vctrs", "r-lib/vctrs#100"))} would run \code{fn}
in 2 separate R sessions, one with CRAN vctrs installed, and one with the
pull request installed.
}
\details{
The packages installed by \code{pkgs} and \code{branches} are placed in temporary
directories that act as an extra library path. The temporary directory is
prepended to \code{libpath}, which is then passed along to \code{\link[callr:r]{callr::r()}} as the
\code{libpath} argument there. This ensures that your personal package libraries
remain untouched.
}
\section{Global options}{

\itemize{
\item \code{cross.quiet}: \verb{[TRUE / FALSE]}

Should cross specific messages about the process be shown?

Defaults to \code{!rlang::is_interactive()} if not set, so messages are only
shown when running interactively.
\item \code{cross.pak_quiet}: \verb{[TRUE / FALSE]}

Should pak installation messages be shown?

Defaults to \code{TRUE} if not set.
}
}

\examples{
\dontshow{if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Run a benchmark across 2 different versions of vctrs
run(pkgs = c("vctrs", "r-lib/vctrs"), ~{
  library(vctrs)
  x <- c(TRUE, FALSE, NA, TRUE)
  bench::mark(vec_detect_missing(x))
})

# Similar to above, but this runs it across 2 different local branches.
# To run this:
# - The working directory is set to the RStudio project for vctrs
# - There must be a branch called `fix/performance-bug`
# - There can't be any uncommitted git changes
run(branches = c("main", "fix/performance-bug"), ~{
  library(vctrs)
  x <- c(TRUE, FALSE, NA, TRUE)
  bench::mark(vec_detect_missing(x))
})
\dontshow{\}) # examplesIf}
}
